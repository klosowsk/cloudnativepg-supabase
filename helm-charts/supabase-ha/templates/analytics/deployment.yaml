{{- if .Values.analytics.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supabase-ha.analytics.fullname" . }}
  labels:
    {{- include "supabase-ha.labels" . | nindent 4 }}
spec:
  {{- if not .Values.analytics.autoscaling.enabled }}
  replicas: {{ .Values.analytics.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "supabase-ha.analytics.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.analytics.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "supabase-ha.analytics.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.analytics.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "supabase-ha.analytics.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.analytics.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init-db
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_HOST
              {{- if .Values.postgresql.enabled }}
              value: {{ include "supabase-ha.db.fullname" . | quote }}
              {{- else }}
              value: {{ .Values.analytics.environment.DB_HOST | quote }}
              {{- end }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "supabase-ha.dbSecretRef" (dict "service" "analytics" "dbSecretRef" .Values.analytics.dbSecretRef "user" "postgres" "Values" .Values) }}
                  key: username
            - name: DB_PORT
              value: {{ .Values.analytics.environment.DB_PORT | quote }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready -h $(DB_HOST) -p $(DB_PORT) -U $(DB_USER); do
              echo "Waiting for database to start..."
              sleep 2
              done
            - echo "Database is ready"
      containers:
        - name: {{ include "supabase-ha.analytics.name" $ }}
          securityContext:
            {{- toYaml .Values.analytics.securityContext | nindent 12 }}
          image: "{{ .Values.analytics.image.repository }}:{{ .Values.analytics.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.analytics.image.pullPolicy }}
          env:
            {{- range $key, $value := .Values.analytics.environment }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- if .Values.postgresql.enabled }}
            - name: DB_HOSTNAME
              value: {{ include "supabase-ha.db.fullname" . }}
            {{- end }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "supabase-ha.dbSecretRef" (dict "service" "analytics" "dbSecretRef" .Values.analytics.dbSecretRef "user" "postgres" "Values" .Values) }}
                  key: password
            - name: DB_PASSWORD_ENC
              valueFrom:
                secretKeyRef:
                  name: {{ include "supabase-ha.dbSecretRef" (dict "service" "analytics" "dbSecretRef" .Values.analytics.dbSecretRef "user" "postgres" "Values" .Values) }}
                  key: password
            - name: DB_DATABASE
              value: {{ .Values.analytics.dbName | default "postgres" | quote }}
            - name: LOGFLARE_API_KEY
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.analytics.secretRef }}
                  name: {{ .Values.secret.analytics.secretRef }}
                  key: {{ .Values.secret.analytics.secretRefKey.apiKey | default "apiKey" }}
                  {{- else }}
                  name: {{ include "supabase-ha.secret.analytics" . }}
                  key: apiKey
                  {{- end }}
            - name: LOGFLARE_PRIVATE_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.analytics.secretRef }}
                  name: {{ .Values.secret.analytics.secretRef }}
                  key: {{ .Values.secret.analytics.secretRefKey.privateApiKey | default "privateApiKey" }}
                  {{- else }}
                  name: {{ include "supabase-ha.secret.analytics" . }}
                  key: privateApiKey
                  {{- end }}
            - name: LOGFLARE_PUBLIC_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.analytics.secretRef }}
                  name: {{ .Values.secret.analytics.secretRef }}
                  key: {{ .Values.secret.analytics.secretRefKey.publicApiKey | default "publicApiKey" }}
                  {{- else }}
                  name: {{ include "supabase-ha.secret.analytics" . }}
                  key: publicApiKey
                  {{- end }}
            {{- if .Values.analytics.bigQuery.enabled }}
            - name: GOOGLE_PROJECT_ID
              value: {{ .Values.analytics.bigQuery.projectId | quote }}
            - name: GOOGLE_PROJECT_NUMBER
              value: {{ .Values.analytics.bigQuery.projectNumber | quote }}
            {{- else }}
            - name: POSTGRES_BACKEND_URL
              value: $(DB_DRIVER)://$(DB_USERNAME):$(DB_PASSWORD_ENC)@$(DB_HOSTNAME):$(DB_PORT)/$(DB_DATABASE)
            - name: POSTGRES_BACKEND_SCHEMA
              value: $(DB_SCHEMA)
            - name: LOGFLARE_FEATURE_FLAG_OVERRIDE
              value: $(FEATURE_FLAG_OVERRIDE)
            {{- end }}
          {{- with .Values.analytics.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.analytics.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.analytics.service.port }}
              protocol: TCP
          {{- if or (.Values.analytics.bigQuery.enabled) (.Values.analytics.volumes) }}
          volumeMounts:
            {{- with .Values.analytics.volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if .Values.analytics.bigQuery.enabled }}
            - mountPath: /opt/app/rel/logflare/bin/gcloud.json
              name: gcloud-credentials
              subPath: gcloud.json
            {{- end }}
          {{- end }}
          {{- with .Values.analytics.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- if or (.Values.analytics.bigQuery.enabled) (.Values.analytics.volumes) }}
      volumes:
        {{- with .Values.analytics.volumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.analytics.bigQuery.enabled }}
        - name: gcloud-credentials
          secret:
            secretName: {{ include "supabase-ha.analytics.fullname" . }}-gcloud
        {{- end }}
      {{- end }}
      {{- with .Values.analytics.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.analytics.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.analytics.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
#!/usr/bin/env bash
set -euo pipefail

#######################################
# Generate SQL files and Kustomize manifests for CloudNativePG Supabase initialization
#
# This script creates:
# 1. Separate SQL files for migrations (easier to read/debug)
# 2. Kustomize base configuration
# 3. Environment-specific overlays (dev/staging/prod)
#
# Output: k8s/base/init-sql/*.sql and k8s/overlays/*
#######################################

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

CUSTOM_INIT_DIR="$PROJECT_ROOT/migrations/custom-init-scripts"
INIT_SCRIPTS_DIR="$PROJECT_ROOT/migrations/init-scripts"
MIGRATIONS_DIR="$PROJECT_ROOT/migrations/migrations"

OUTPUT_SQL_DIR="$PROJECT_ROOT/k8s/base/init-sql"
OUTPUT_BASE_DIR="$PROJECT_ROOT/k8s/base"
OUTPUT_OVERLAYS_DIR="$PROJECT_ROOT/k8s/overlays"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "========================================"
echo "CloudNativePG Kustomize Generator"
echo "========================================"
echo ""

# Clean and create output directories
echo -e "${BLUE}[1/5] Preparing output directories...${NC}"
rm -rf "$OUTPUT_SQL_DIR" "$OUTPUT_OVERLAYS_DIR"
mkdir -p "$OUTPUT_SQL_DIR"
mkdir -p "$OUTPUT_OVERLAYS_DIR"/{dev,staging,production}

echo -e "${GREEN}✓ Directories prepared${NC}"
echo ""

# Generate master orchestrator SQL
echo -e "${BLUE}[2/5] Creating master orchestrator SQL...${NC}"

cat > "$OUTPUT_SQL_DIR/00-master-init.sql" << 'EOF'
-- Supabase Master Initialization Script for CloudNativePG
-- This script orchestrates all Supabase migrations and initialization
-- Auto-generated by scripts/generate-configmaps.sh

\set ON_ERROR_STOP on

-- Validate required environment variables
DO $$
BEGIN
  IF current_setting('supabase.jwt_secret', true) IS NULL THEN
    RAISE EXCEPTION 'JWT_SECRET environment variable is required';
  END IF;
EXCEPTION WHEN undefined_object THEN
  RAISE EXCEPTION 'JWT_SECRET must be set via postgresql.parameters in Cluster manifest';
END $$;

\echo '===================================='
\echo 'Supabase Initialization Started'
\echo '===================================='
\echo ''

-- Create postgres role if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'postgres') THEN
    CREATE ROLE postgres SUPERUSER LOGIN;
    RAISE NOTICE 'Created postgres superuser role';
  END IF;
END $$;

-- Ensure supabase_admin exists and is superuser
DO $$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'supabase_admin') THEN
    CREATE ROLE supabase_admin SUPERUSER LOGIN;
    RAISE NOTICE 'Created supabase_admin role';
  ELSE
    ALTER ROLE supabase_admin SUPERUSER;
  END IF;
END $$;

\echo ''
\echo 'Phase 1: Custom Init Scripts'
\echo '----------------------------'
\ir 01-custom-init.sql

\echo ''
\echo 'Phase 2: Supabase Init Scripts'
\echo '-------------------------------'
\ir 02-supabase-init.sql

\echo ''
\echo 'Phase 3: Supabase Migrations'
\echo '-----------------------------'
\ir 03-supabase-migrations.sql

\echo ''
\echo '===================================='
\echo '✅ Supabase Initialization Complete!'
\echo '===================================='
EOF

echo -e "${GREEN}✓ Master orchestrator created${NC}"
echo ""

# Generate combined custom init scripts
echo -e "${BLUE}[3/5] Combining custom init scripts...${NC}"

cat > "$OUTPUT_SQL_DIR/01-custom-init.sql" << 'EOF'
-- Custom Initialization Scripts
-- Combined from migrations/custom-init-scripts/
-- Auto-generated by scripts/generate-configmaps.sh

EOF

if [ -d "$CUSTOM_INIT_DIR" ]; then
  for sql_file in "$CUSTOM_INIT_DIR"/*.sql; do
    if [ -f "$sql_file" ]; then
      filename=$(basename "$sql_file")
      echo "  - $filename"

      cat >> "$OUTPUT_SQL_DIR/01-custom-init.sql" << EOF

\echo '▶ $filename'

EOF
      cat "$sql_file" >> "$OUTPUT_SQL_DIR/01-custom-init.sql"
      cat >> "$OUTPUT_SQL_DIR/01-custom-init.sql" << EOF

\echo '  ✅ Success'

EOF
    fi
  done
fi

echo -e "${GREEN}✓ Custom init scripts combined${NC}"
echo ""

# Generate combined supabase init scripts
echo -e "${BLUE}[4/5] Combining Supabase init scripts...${NC}"

cat > "$OUTPUT_SQL_DIR/02-supabase-init.sql" << 'EOF'
-- Supabase Initialization Scripts
-- Combined from migrations/init-scripts/
-- Auto-generated by scripts/generate-configmaps.sh

EOF

if [ -d "$INIT_SCRIPTS_DIR" ]; then
  for sql_file in "$INIT_SCRIPTS_DIR"/*.sql; do
    if [ -f "$sql_file" ]; then
      filename=$(basename "$sql_file")
      echo "  - $filename"

      cat >> "$OUTPUT_SQL_DIR/02-supabase-init.sql" << EOF

\echo '▶ $filename'

EOF
      cat "$sql_file" >> "$OUTPUT_SQL_DIR/02-supabase-init.sql"
      cat >> "$OUTPUT_SQL_DIR/02-supabase-init.sql" << EOF

\echo '  ✅ Success'

EOF
    fi
  done
fi

echo -e "${GREEN}✓ Supabase init scripts combined${NC}"
echo ""

# Generate combined migrations
echo -e "${BLUE}[5/5] Combining Supabase migrations...${NC}"

cat > "$OUTPUT_SQL_DIR/03-supabase-migrations.sql" << 'EOF'
-- Supabase Database Migrations
-- Combined from migrations/migrations/
-- Auto-generated by scripts/generate-configmaps.sh

EOF

if [ -d "$MIGRATIONS_DIR" ]; then
  migration_count=$(find "$MIGRATIONS_DIR" -name "*.sql" | wc -l | tr -d ' ')
  current=0

  for sql_file in "$MIGRATIONS_DIR"/*.sql; do
    if [ -f "$sql_file" ]; then
      filename=$(basename "$sql_file")
      current=$((current + 1))
      echo "  - [$current/$migration_count] $filename"

      cat >> "$OUTPUT_SQL_DIR/03-supabase-migrations.sql" << EOF

\echo '▶ [$current/$migration_count] $filename'

EOF
      cat "$sql_file" >> "$OUTPUT_SQL_DIR/03-supabase-migrations.sql"
      cat >> "$OUTPUT_SQL_DIR/03-supabase-migrations.sql" << EOF

\echo '  ✅ Success'

EOF
    fi
  done
fi

echo -e "${GREEN}✓ Supabase migrations combined${NC}"
echo ""

# Get stats
total_lines=$(cat "$OUTPUT_SQL_DIR"/*.sql | wc -l | tr -d ' ')
total_size=$(du -sh "$OUTPUT_SQL_DIR" | cut -f1)

echo "========================================"
echo -e "${GREEN}SQL Files Generated Successfully!${NC}"
echo "========================================"
echo ""
echo "Output directory: k8s/base/init-sql/"
echo "  - Files: $(ls "$OUTPUT_SQL_DIR" | wc -l | tr -d ' ')"
echo "  - Total lines: ${total_lines}"
echo "  - Total size: ${total_size}"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "  1. Review SQL files in k8s/base/init-sql/"
echo "  2. Run: ./scripts/generate-kustomize.sh to create Kustomize manifests"
echo "  3. Or manually create k8s/base/kustomization.yaml"
echo ""
